{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const useFocused = obj => {\n  const [active, setActive] = useState(document.activeElement);\n\n  const handleFocusIn = e => {\n    if (obj.current === document.activeElement) setActive(true);else setActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('focusin', handleFocusIn);\n    return () => {\n      document.removeEventListener('focusin', handleFocusIn);\n    };\n  }, []);\n  return active;\n};\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n}\nexport function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}","map":{"version":3,"sources":["/Users/maa48/github-projects/Clubs-2020/client/src/components/customHooks/index.js"],"names":["useState","useEffect","useFocused","obj","active","setActive","document","activeElement","handleFocusIn","e","current","addEventListener","removeEventListener","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","useOnClickOutside","ref","handler","listener","event","contains","target"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,UAAU,GAAIC,GAAD,IAAS;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAACM,QAAQ,CAACC,aAAV,CAApC;;AAEA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AAC3B,QAAIN,GAAG,CAACO,OAAJ,KAAgBJ,QAAQ,CAACC,aAA7B,EAA4CF,SAAS,CAAC,IAAD,CAAT,CAA5C,KACKA,SAAS,CAAC,KAAD,CAAT;AACN,GAHD;;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,SAA1B,EAAqCH,aAArC;AACA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,SAA7B,EAAwCJ,aAAxC;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,SAAOJ,MAAP;AACD,CAhBM;;AAkBP,SAASS,mBAAT,GAA+B;AAC7B,QAAM;AAAEC,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CC,MAAnD;AACA,SAAO;AACLH,IAAAA,KADK;AAELE,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,SAASE,mBAAT,GAA+B;AACpC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CrB,QAAQ,CACtDa,mBAAmB,EADmC,CAAxD;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACd,aAASqB,YAAT,GAAwB;AACtBD,MAAAA,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB;AACD;;AAEDK,IAAAA,MAAM,CAACP,gBAAP,CAAwB,QAAxB,EAAkCW,YAAlC;AACA,WAAO,MAAMJ,MAAM,CAACN,mBAAP,CAA2B,QAA3B,EAAqCU,YAArC,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAOF,gBAAP;AACD;AAED,OAAO,SAASG,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;AAC9CxB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACA,UAAI,CAACH,GAAG,CAACd,OAAL,IAAgBc,GAAG,CAACd,OAAJ,CAAYkB,QAAZ,CAAqBD,KAAK,CAACE,MAA3B,CAApB,EAAwD;AACtD;AACD;;AACDJ,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD,KAND;;AAQArB,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,WAA1B,EAAuCe,QAAvC;AAEApB,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,YAA1B,EAAwCe,QAAxC;AAEA,WAAO,MAAM;AACXpB,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,WAA7B,EAA0Cc,QAA1C;AAEApB,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,YAA7B,EAA2Cc,QAA3C;AACD,KAJD;AAKD,GAlBQ,EAkBN,CAACF,GAAD,EAAMC,OAAN,CAlBM,CAAT;AAmBD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useFocused = (obj) => {\n  const [active, setActive] = useState(document.activeElement);\n\n  const handleFocusIn = (e) => {\n    if (obj.current === document.activeElement) setActive(true);\n    else setActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('focusin', handleFocusIn);\n    return () => {\n      document.removeEventListener('focusin', handleFocusIn);\n    };\n  }, []);\n\n  return active;\n};\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nexport function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n"]},"metadata":{},"sourceType":"module"}