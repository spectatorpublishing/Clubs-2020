{"ast":null,"code":"var _jsxFileName = \"/Users/maa48/github-projects/Clubs-2020/client/src/components/grayTag/container.js\";\nimport React, { useEffect, useState } from 'react';\nimport { GrayTagContext } from '../contexts/index';\n\nconst GrayTagContainer = ({\n  children\n}) => {\n  const [selectedTag, setSelectedTag] = useState('');\n  useEffect(() => {\n    console.log(selectedTag);\n  }, [selectedTag]);\n\n  const handleClick = identifier => {\n    if (selectedTag === identifier) setSelectedTag('');else setSelectedTag(identifier);\n  };\n\n  return /*#__PURE__*/React.createElement(GrayTagContext.Provider, {\n    value: {\n      handleClick,\n      identifier\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default GrayTagContainer;","map":{"version":3,"sources":["/Users/maa48/github-projects/Clubs-2020/client/src/components/grayTag/container.js"],"names":["React","useEffect","useState","GrayTagContext","GrayTagContainer","children","selectedTag","setSelectedTag","console","log","handleClick","identifier"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,mBAA/B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,QAAMI,WAAW,GAAIC,UAAD,IAAgB;AAClC,QAAIL,WAAW,KAAKK,UAApB,EAAgCJ,cAAc,CAAC,EAAD,CAAd,CAAhC,KACKA,cAAc,CAACI,UAAD,CAAd;AACN,GAHD;;AAIA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAED,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,QADH,CADF;AAKD,CAfD;;AAiBA,eAAeD,gBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GrayTagContext } from '../contexts/index';\n\nconst GrayTagContainer = ({ children }) => {\n  const [selectedTag, setSelectedTag] = useState('');\n  useEffect(() => {\n    console.log(selectedTag);\n  }, [selectedTag]);\n\n  const handleClick = (identifier) => {\n    if (selectedTag === identifier) setSelectedTag('');\n    else setSelectedTag(identifier);\n  };\n  return (\n    <GrayTagContext.Provider value={{ handleClick, identifier }}>\n      {children}\n    </GrayTagContext.Provider>\n  );\n};\n\nexport default GrayTagContainer;\n"]},"metadata":{},"sourceType":"module"}