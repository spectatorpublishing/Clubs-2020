{"ast":null,"code":"import { useState, useEffect, useContext } from 'react';\nimport { ViewportContext } from '../contexts/index';\nexport const useFocused = obj => {\n  const [active, setActive] = useState(document.activeElement);\n\n  const handleFocusIn = e => {\n    if (obj.current === document.activeElement) setActive(true);else setActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('focusin', handleFocusIn);\n    return () => {\n      document.removeEventListener('focusin', handleFocusIn);\n    };\n  }, []);\n  return active;\n};\nexport const useViewport = () => {\n  const {\n    width,\n    height\n  } = useContext(viewportContext);\n  return {\n    width,\n    height\n  };\n};\nexport function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}","map":{"version":3,"sources":["/Users/maa48/github-projects/Clubs-2020/client/src/components/customHooks/index.js"],"names":["useState","useEffect","useContext","ViewportContext","useFocused","obj","active","setActive","document","activeElement","handleFocusIn","e","current","addEventListener","removeEventListener","useViewport","width","height","viewportContext","useOnClickOutside","ref","handler","listener","event","contains","target"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,UAAU,GAAIC,GAAD,IAAS;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACQ,QAAQ,CAACC,aAAV,CAApC;;AAEA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AAC3B,QAAIN,GAAG,CAACO,OAAJ,KAAgBJ,QAAQ,CAACC,aAA7B,EAA4CF,SAAS,CAAC,IAAD,CAAT,CAA5C,KACKA,SAAS,CAAC,KAAD,CAAT;AACN,GAHD;;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,SAA1B,EAAqCH,aAArC;AACA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,SAA7B,EAAwCJ,aAAxC;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,SAAOJ,MAAP;AACD,CAhBM;AAkBP,OAAO,MAAMS,WAAW,GAAG,MAAM;AAC/B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBf,UAAU,CAACgB,eAAD,CAApC;AACA,SAAO;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAHM;AAKP,OAAO,SAASE,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;AAC9CpB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACA,UAAI,CAACH,GAAG,CAACR,OAAL,IAAgBQ,GAAG,CAACR,OAAJ,CAAYY,QAAZ,CAAqBD,KAAK,CAACE,MAA3B,CAApB,EAAwD;AACtD;AACD;;AACDJ,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD,KAND;;AAQAf,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,WAA1B,EAAuCS,QAAvC;AAEAd,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,YAA1B,EAAwCS,QAAxC;AAEA,WAAO,MAAM;AACXd,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,WAA7B,EAA0CQ,QAA1C;AAEAd,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,YAA7B,EAA2CQ,QAA3C;AACD,KAJD;AAKD,GAlBQ,EAkBN,CAACF,GAAD,EAAMC,OAAN,CAlBM,CAAT;AAmBD","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport { ViewportContext } from '../contexts/index';\n\nexport const useFocused = (obj) => {\n  const [active, setActive] = useState(document.activeElement);\n\n  const handleFocusIn = (e) => {\n    if (obj.current === document.activeElement) setActive(true);\n    else setActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('focusin', handleFocusIn);\n    return () => {\n      document.removeEventListener('focusin', handleFocusIn);\n    };\n  }, []);\n\n  return active;\n};\n\nexport const useViewport = () => {\n  const { width, height } = useContext(viewportContext);\n  return { width, height };\n};\n\nexport function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n"]},"metadata":{},"sourceType":"module"}