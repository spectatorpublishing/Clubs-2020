{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const useFocused = obj => {\n  const [active, setActive] = useState(document.activeElement);\n\n  const handleFocusIn = e => {\n    if (obj.current === document.activeElement) setActive(true);else setActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('focusin', handleFocusIn);\n    return () => {\n      document.removeEventListener('focusin', handleFocusIn);\n    };\n  }, []);\n  return active;\n};\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener('resize', handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n};","map":{"version":3,"sources":["/Users/maa48/github-projects/Clubs-2020/client/src/components/customHooks/index.js"],"names":["useState","useEffect","useFocused","obj","active","setActive","document","activeElement","handleFocusIn","e","current","addEventListener","removeEventListener","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,UAAU,GAAGC,GAAG,IAAI;AAC/B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAACM,QAAQ,CAACC,aAAV,CAApC;;AAEA,QAAMC,aAAa,GAAGC,CAAC,IAAI;AACzB,QAAIN,GAAG,CAACO,OAAJ,KAAgBJ,QAAQ,CAACC,aAA7B,EAA4CF,SAAS,CAAC,IAAD,CAAT,CAA5C,KACKA,SAAS,CAAC,KAAD,CAAT;AACN,GAHD;;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,SAA1B,EAAqCH,aAArC;AACA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,SAA7B,EAAwCJ,aAAxC;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,SAAOJ,MAAP;AACD,CAhBM;AAkBP,OAAO,MAAMS,aAAa,GAAG,MAAM;AACjC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC;AAC3CgB,IAAAA,KAAK,EAAEC,SADoC;AAG3CC,IAAAA,MAAM,EAAED;AAHmC,GAAD,CAA5C;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACd;AAEA,aAASkB,YAAT,GAAwB;AACtB;AAEAJ,MAAAA,aAAa,CAAC;AACZC,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADF;AAGZH,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAHH,OAAD,CAAb;AAKD,KAXa,CAad;;;AAEAF,IAAAA,MAAM,CAACT,gBAAP,CAAwB,QAAxB,EAAkCQ,YAAlC,EAfc,CAiBd;;AAEAA,IAAAA,YAAY,GAnBE,CAqBd;;AAEA,WAAO,MAAMC,MAAM,CAACR,mBAAP,CAA2B,QAA3B,EAAqCO,YAArC,CAAb;AACD,GAxBQ,EAwBN,EAxBM,CAAT,CAPiC,CA+BzB;;AAER,SAAOL,UAAP;AACD,CAlCM","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useFocused = obj => {\n  const [active, setActive] = useState(document.activeElement);\n\n  const handleFocusIn = e => {\n    if (obj.current === document.activeElement) setActive(true);\n    else setActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('focusin', handleFocusIn);\n    return () => {\n      document.removeEventListener('focusin', handleFocusIn);\n    };\n  }, []);\n\n  return active;\n};\n\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n\n    height: undefined\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n\n    function handleResize() {\n      // Set window width/height to state\n\n      setWindowSize({\n        width: window.innerWidth,\n\n        height: window.innerHeight\n      });\n    }\n\n    // Add event listener\n\n    window.addEventListener('resize', handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n\n    handleResize();\n\n    // Remove event listener on cleanup\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n"]},"metadata":{},"sourceType":"module"}